**一、求深度，深度优先来来来**

* 

```
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return findDepth(root,0);
    }

    public int findDepth(TreeNode node,int level){
          if(node==null) return level;
          level++;
          int leftDepth=findDepth(node.left,level);
          int rightDepth=findDepth(node.right,level);
          return Math.max(leftDepth,rightDepth);
    }
}
```

**精简版：**

* 

```
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
}
```

**二、广度优先也可以做**
广度优先就是层序遍历，层序遍历就知道有多少层了，那就用队列LinkedList，while+for循环的组合。

* 

```
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> linkedList = new LinkedList<>();
        linkedList.offer(root);
        int level=0;
        while(!linkedList.isEmpty()){
             level++;
             int count = linkedList.size();
             for(int i=0;i<count;i++){
                 TreeNode node=linkedList.poll();
                 if(node.left!=null){
                     linkedList.offer(node.left);
                 }
                  if(node.right!=null){
                     linkedList.offer(node.right);
                 }
             }


        }
        return level;
    }
}
```

